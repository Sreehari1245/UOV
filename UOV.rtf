{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh17440\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 // Reference: NIST UOV submission specification\
// https://csrc.nist.gov/csrc/media/Projects/pqc-dig-sig/documents/round-1/spec-files/UOV-spec-web.pdf\
\
// This Magma implementation uses built-in random generators for simplicity,\
// allowing easy verification using the online Magma calculator.\
// In practice, a cryptographic hash (i.e. SHA-256 as in spec) should be used for randomness.\
\
// Define the finite field F16 = GF(2^4) with irreducible polynomial x^4 + x + 1\
F16 := ExtensionField<GF(2), x | x^4 + x + 1>;\
\
// UOV Parameters\
n := 112;  // Total number of variables (oil + vinegar)\
m := 44;   // Number of oil variables\
l := n - m; // Number of vinegar variables\
\
// Generate random seeds for secret and public key (128-bit) \
seed_sk := Random(2^127, 2^128 - 1);  // Secret seed \
seed_pk := Random(2^127, 2^128 - 1);  // Public seed \
\
// Convert integer seeds to binary strings \
binarySeed_sk := IntegerToString(seed_sk, 2);\
binarySeed_pk := IntegerToString(seed_pk, 2);\
\
// Output seeds for reference\
print "128-bit secret binary seed:", binarySeed_sk;\
print "128-bit public binary seed:", binarySeed_pk;\
\
// Convert binary string to integer\
function BinaryToInteger(binary_string)\
    result := 0;\
    bits := [StringToInteger(c) : c in Eltseq(binary_string)];\
    for i in [1..#bits] do\
        result +:= bits[i] * 2^(#bits - i);\
    end for;\
    return result;\
end function;\
\
// Generate deterministic random binary string of a fixed length from seed\
function RandNum(seed, output_length)\
    SetSeed(seed);\
    num := Random(2^(output_length - 1), 2^output_length - 1);\
    binary_string := IntegerToString(num, 2);\
    padding := output_length - #binary_string;\
    if padding gt 0 then\
        binary_string := &cat["0" : i in [1..padding]] cat binary_string;\
    end if;\
    return binary_string;\
end function;\
\
// Generate matrix over F16 using a seed \
function MatrixOverF16(seed, a, b)\
    output_length := 4 * a * b; // Each F16 element needs 4 bits\
    binary_string := RandNum(seed, output_length);\
    values := [];\
    index := 1;\
    for i in [1..a] do\
        for j in [1..b] do\
            value_bits := binary_string[index..index + 3]; // 4-bit chunks\
            index +:= 4;\
            element := BinaryToInteger(value_bits) mod 15; // Map to F16 element \
            Append(~values, F16.1^element);\
        end for;\
    end for;\
    return Matrix(F16, a, b, values);\
end function;\
\
// Generate column vector over F16\
function VectorOverF16(seed, a)\
    return MatrixOverF16(seed, a, 1);\
end function;\
\
// Generate secret oil matrix O (maps oil vars to full vector space) \
O := MatrixOverF16(seed_sk, n - m, m);\
\
// Generate public key matrices P1_i and P2_i for i in 1..m \
function PubGen(seed)\
    P1_Matrices := [];\
    P2_Matrices := [];\
    for i in [1..m] do\
        SetSeed(seed + i); // Derive sub-seed for each polynomial\
        P12 := MatrixOverF16(seed + i, n - m, n); // Full row of coefficients\
        Append(~P1_Matrices, Submatrix(P12, 1, 1, n - m, n - m));     // Left block (P1_i)\
        Append(~P2_Matrices, Submatrix(P12, 1, n - m + 1, n - m, m)); // Right block (P2_i)\
    end for;\
    return P1_Matrices, P2_Matrices;\
end function;\
\
// Generate public key matrices P1 and P2 \
PublicKeysP1, PublicKeysP2 := PubGen(seed_sk);\
\
// Compute P3_i = -(O^T * P1_i * O) - (O^T * P2_i) for each i \
PublicKeysP3 := [];\
for i in [1..m] do\
    term1 := Transpose(O) * PublicKeysP1[i] * O;\
    term2 := Transpose(O) * PublicKeysP2[i];\
    Append(~PublicKeysP3, -term1 - term2);\
end for;\
\
// Precompute signature matrices S_i = (P1_i + P1_i\uc0\u7488 ) * O + P2_i\
S := [];\
for i in [1..m] do\
    Append(~S, (PublicKeysP1[i] + Transpose(PublicKeysP1[i])) * O + PublicKeysP2[i]);\
end for;\
\
// Signature Generation Algorithm \
function Sig_gen(O, S, P1, P2, P3, mu)\
    salt := Random(2^127, 2^128 - 1); // Generate a new salt\
    binary_salt := IntegerToString(salt, 2);\
    binarySeed_t := binary_salt cat mu; // Hash-like expansion\
    seed_t := BinaryToInteger(binarySeed_t);\
    \
    // Generate target vector t = H(mu || salt)\
    t := VectorOverF16(seed_t, m);\
\
    // Seed to generate vinegar part\
    binarySeed_v := binarySeed_t cat binarySeed_sk;\
    seed_v := BinaryToInteger(binarySeed_v);\
\
    for ctr in [1..255] do // Try up to 255 vinegar vectors. Reduces the risks of timing attacks\
        binaryseedv_ctr := binarySeed_v cat IntegerToString(ctr, 2);\
        seedv_ctr := BinaryToInteger(binaryseedv_ctr);\
        v := VectorOverF16(seedv_ctr, n - m); // Random vinegar vector\
\
        // Construct linear system L * x = t - y\
        L := ZeroMatrix(F16, m, m);\
        for i in [1..m] do\
            L[i] := (Transpose(v) * S[i])[1];\
        end for;\
\
        // Compute right-hand side y\
        y := ZeroMatrix(F16, m, 1);\
        if Determinant(L) ne 0 then\
            for i in [1..m] do\
                y[i][1] := (Transpose(v) * P1[i] * v)[1][1];\
            end for;\
\
            x := L^-1 * (t - y); // Solve for oil variables\
            s := ZeroMatrix(F16, n, 1);\
\
            // Combine v and x into signature vector s\
            for i in [1..n - m] do\
                s[i][1] := v[i][1] + (O * x)[i][1];\
            end for;\
            for i in [n - m + 1..n] do\
                s[i][1] := x[i - n + m][1];\
            end for;\
\
            return s, salt; // Return signature and salt\
        end if;\
    end for;\
    return "Failure"; // No valid signature found\
end function;\
\
// Signature Verification\
function SigVrfy(P1, P2, P3, mu, s, salt)\
    binary_salt := IntegerToString(salt, 2);\
    binarySeed_t := binary_salt cat mu;\
    seed_t := BinaryToInteger(binarySeed_t);\
    t := VectorOverF16(seed_t, m);\
\
    for i in [1..m] do\
        // Reconstruct full matrix P_i from public parts\
        P := HorizontalJoin(VerticalJoin(P1[i], ZeroMatrix(F16, m, n - m)),VerticalJoin(P2[i], P3[i]));\
\
        // Check if quadratic form s^T * P * s matches t[i]\
        if t[i][1] ne (Transpose(s) * P * s)[1][1] then \
            return false;\
        end if;\
    end for;\
    return true; // All checks passed\
end function;\
\
// Run signature generation and verification\
\
mu = \'930\'94\
s, salt := Sig_gen(O, S, PublicKeysP1, PublicKeysP2, PublicKeysP3, mu);\
\
if SigVrfy(PublicKeysP1, PublicKeysP2, PublicKeysP3, mu, s, salt) then\
    "Signature is Valid";\
else\
    "Signature is Invalid";\
end if;\
}